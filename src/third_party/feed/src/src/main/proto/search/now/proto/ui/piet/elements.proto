// Copyright 2018 The Feed Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

import "src/main/proto/search/now/proto/ui/piet/accessibility.proto";
import "src/main/proto/search/now/proto/ui/piet/actions.proto";
import "src/main/proto/search/now/proto/ui/piet/binding_refs.proto";
import "src/main/proto/search/now/proto/ui/piet/images.proto";
import "src/main/proto/search/now/proto/ui/piet/styles.proto";
import "src/main/proto/search/now/proto/ui/piet/text.proto";

package search.now.ui.piet;

option optimize_for=LITE_RUNTIME;

option java_package = "com.google.search.now.ui.piet";
option java_outer_classname = "ElementsProto";
option cc_enable_arenas = true;

// A slice is an abstract representation of a horizontal Element.
message Slice {

  // The content within this Slice.
  oneof slice_instance {
    // The slice is an ElementList.
    ElementList inline_slice = 1 [deprecated = true];

    // The slice is defined by a Template.
    TemplateInvocation template_slice = 2 [deprecated = true];
  }
}

// A list of Elements defining UI elements.
message ElementList {

  // The ui elements in the list
  repeated Element elements = 1;

  // Vertical gravity of the elements in the list. All the elements in the list
  // are aligned the same way, in regards to this ElementList. The
  // ElementList spans over the whole vertical space of its parent.
  optional GravityVertical gravity_vertical = 2 [deprecated = true];

  // Styles applied to this ElementList.
  optional StyleIdsStack style_references = 3;

  // Defines Actions that may be associated with the content of the
  // ElementList. The server is responsible for ensuring that the size of this
  // content is large enough to present a clear click target for the user.
  // Deprecated: use actions on Element instead
  oneof actions_data {
    // Inlined actions.
    Actions actions = 4 [deprecated = true];

    // Actions coming from a template.
    ActionsBindingRef actions_binding = 5 [deprecated = true];
  }

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// A template can be used to instantiate a single instance, or a list of
// instances at once: each of these is termed a TemplateInvocation. One instance
// is created for each `binding_context` provided.
//
// The types of objects instantiated by the template are determined by the
// element that holds the invocation. For example, an invocation from a Slice
// will create one or more slices. Invocation from a GridCell will create one or
// more GridCells.
message TemplateInvocation {

  // The Template to be used.
  optional string template_id = 1;

  // To isolate Templates, we define the BindingContext used by the template
  // within the invocation. When a TemplateInvocation is processed, we will
  // create a template instance for each BindingContext defined (if none is
  // defined, none will be created).
  repeated BindingContext binding_contexts = 2;

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// Element is the "superclass" of all container and content types, holding all
// shared parameters (styles, actions, etc).
//
// Element size expands to fill its container, unless the content is taller than
// the container, and the container height is not specified explicitly. In that
// case, the Element and the container both get the height of the content.
message Element {

  // The specific content represented by this Element.
  oneof elements {
    // A custom view that Piet knows nothing about. Servers can use this message
    // to populate a custom proto extension, which Piet passes along to the Host
    // for rendering. The Host is expected to be able to interpret and render
    // this view and return to Piet, which then simply places it within the
    // current view hierarchy at the proper position.
    // If a renderer cannot be found for a particular CustomElement in a client
    // implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING & warns
    // the user at runtime. A black/grey box is displayed in place of the
    // CustomElement, but the rest of the Frame is still rendered. It is
    // possible for CustomElements to invoke Piet for rendering sub-views, but
    // only top-level Piet Frame protos can be embedded this way. (In other
    // words, do not try to embed Piet Elements directly inside a
    // CustomElement).
    CustomElement custom_element = 1;

    // A simple text line
    TextElement text_element = 2;

    // An image container
    ImageElement image_element = 3;

    // Add a spacer line which can be defined as a divider.
    SpacerElement spacer_element = 4;

    // A GridRow contains a set of Cells.
    GridRow grid_row = 5;

    // A list of Elements.
    ElementList element_list = 6;

    // Allow a binding of a ElementList.
    ElementListBindingRef element_list_binding = 7;

    // Allow binding of a template instance. If the referenced template has
    // several binding contexts, an Element instance will be created for each
    // one.
    //
    // This may happen in one of two cases:
    //
    // The Element appears inside an ElementList, or repeated Element
    // --------------------------------------------------------------
    //
    // For example:
    // In case there's an ElementList with the following Elements:
    //
    //  +----------------------------+
    //  |         Template_1         |
    //  +----------------------------+
    //  |   Template_2 with binding  |
    //  |     values [ a , b , c ]   |
    //  +----------------------------+
    //  |         Template_3         |
    //  +----------------------------+
    //
    // After the bindings are resolved, it will become:
    //  +----------------------------+
    //  |         Template_1         |
    //  +----------------------------+
    //  | Template_2 {with data "a"} |
    //  +----------------------------+
    //  | Template_2 {with data "b"} |
    //  +----------------------------+
    //  | Template_2 {with data "c"} |
    //  +----------------------------+
    //  |         Template_3         |
    //  +----------------------------+
    //
    // The Element appears in a GridCell
    // ---------------------------------
    // A GridCell is created for each invocation of the template. The created
    // GridCells will be added to the GridRow containing this GridCell. The
    // width of the created GridCells is duplicated from the GridCell containing
    // this Element.
    //
    // For example:
    // In case there's a GridRow with the following GridCells:
    //  +----------+------------------------+----------+
    //  |   Cell   | Cell with Element with |   Cell   |
    //  |          |  Template 2 with data  |          |
    //  |     1    |    bindings {a,b,c }   |    3     |
    //  +----------+------------------------+----------+
    //
    // After the bindings are resolved, it will become:
    //  +----------+------------+------------+------------+---------+
    //  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
    //  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
    //  +----------+------------+------------+------------+---------+
    //
    //
    // IMPORTANT:
    // This feature may not be supported on all platforms; see [INTERNAL LINK].
    TemplateBindingRef template_binding = 8;

    // Similar to template_binding, but defined inline.
    TemplateInvocation template_invocation = 19;
  }

  // The value of the VED token to be used by this Element.
  oneof ved_value {
    // A base64 encoded serialized ClickTrackingCGI proto that identifies the
    // logged Visual Element corresponding to this piet Element.
    string ved = 9;

    // A VedBindingRef to the VED that this Element will be bound to.
    // This is only meant to be used for Elements defined by a Template.
    VedBindingRef ved_binding = 10;
  }

  // Every UI element can have accessibility-related fields.
  optional Accessibility accessibility = 11;

  // Horizontal gravity of this element's content within the parent container
  optional GravityHorizontal gravity_horizontal = 12;

  // Vertical gravity of this element's content within the parent container
  optional GravityVertical gravity_vertical = 18;

  // A set of ElementLists to be overlaid on top of this Element.
  // This field is repeated to allow overlaying multiple sets of Elements with
  // different gravity settings. The position of the ElementList inside the
  // repeated field determines the order in which views will be laid out. Later
  // ElementLists will appear above the earlier ones.
  repeated ElementList overlay_elements = 13 [deprecated = true];

  // Defines Actions that may be associated with the content of the Element.
  // The server is responsible for ensuring that the size of this content is
  // large enough to present a clear click target for the user.
  oneof actions_data {
    // Inlined actions.
    Actions actions = 14;

    // Actions coming from a template.
    ActionsBindingRef actions_binding = 15;
  }

  // Defines the overflow behavior for elements that are wider than this
  // Element.
  // Elements can be wider than the container Element in two scenarios:
  //  1. An element has defined width in its style, and the width is larger
  //     than the size of the Element.
  //  2. The element is a GridRow, where the width sum of cells with defined dp
  //     width is larger than the containing Element.
  //
  // In all other cases, contained elements cannot be wider than the container
  // Element.
  //
  // IMPORTANT: This might not be supported in all implementations of Piet, due
  //   to implementation/product decisions (for example, horizontal scrolling in
  //   a swipable card might be disabled).
  optional OverflowBehavior horizontal_overflow = 16
      [default = OVERFLOW_HIDDEN];

  // Styles to apply to this Element. If any style_ids cannot be found,
  // ERR_MISSING_STYLES is raised.
  optional StyleIdsStack style_references = 17;
}

// Defines the behavior for elements that don't fit in the view
enum OverflowBehavior {

  // Unspecified value, will default to OVERFLOW_HIDDEN.
  OVERFLOW_UNSPECIFIED = 0;

  // All elements outside the boundaries of the view are hidden.
  OVERFLOW_HIDDEN = 1;

  // A scroll behavior is added to show elements that are outside of the view.
  OVERFLOW_SCROLL = 2;
}

// Specifies gravity on the horizontal axis.
enum GravityHorizontal {

  GRAVITY_HORIZONTAL_UNSPECIFIED = 0;

  // Align with the start side (left in LTR layouts)
  GRAVITY_START = 1;

  // Align with the end side (right in LTR layouts)
  GRAVITY_END = 2;

  // Align centered
  GRAVITY_CENTER = 3;
}

// Specifies gravity on the vertical axis.
enum GravityVertical {

  GRAVITY_VERTICAL_UNSPECIFIED = 0;

  // Align with the top side
  GRAVITY_TOP = 1;

  // Align vertically centered
  GRAVITY_MIDDLE = 2;

  // Align with the bottom side
  GRAVITY_BOTTOM = 3;
}

// A custom view that Piet knows nothing about. Servers can use this message to
// populate a custom proto extension, which Piet passes along to the Host for
// rendering. The Host is expected to be able to interpret and render this view
// and return to Piet, which then simply places it within the current view
// hierarchy at the proper position. If no renderer for this CustomElement can
// be found at runtime, ERR_CUSTOM_ELEMENT_RENDERER_MISSING is raised.
message CustomElement {

  // Styles applied to this CustomElement. If any style_ids cannot be found,
  // ERR_MISSING_STYLES is raised.
  optional StyleIdsStack style_references = 1;

  // Content for this CustomElement.
  oneof content {
    // The binding to the BindingValue for a CustomElement.
    CustomBindingRef custom_binding = 2;

    // The data to be displayed.
    CustomElementData custom_element_data = 3;
  }

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// A simple text line (Android TextView, iOS UILabel, or HTML <div>).
message TextElement {

  // Styles applied to this TextElement. If any style_ids cannot be found,
  // ERR_MISSING_STYLES is raised.
  optional StyleIdsStack style_references = 1;

  // Content for this TextElement.
  oneof content {
    // The binding to the BindingValue for a ParameterizedText. It is an error
    // if the BindingValue doesn't define a ParameterizedText.
    ParameterizedTextBindingRef parameterized_text_binding = 2;

    // The text to display.
    ParameterizedText parameterized_text = 3;

    // The binding to the BindingValue for a ChunkedText. It is an error if the
    // BindingValue doesn't define a ChunkedText. Styles referenced inside the
    // ChunkedText should override the style references in this TextElement.
    ChunkedTextBindingRef chunked_text_binding = 4;

    // ChunkedText to be displayed. Styles referenced inside the text chunks
    // should override the style references in this TextElement.
    ChunkedText chunked_text = 5;
  }

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// An Image which is displayed as a horizontal slice within a parent container.
message ImageElement {

  // Styles applied to this ImageElement. If any style_ids cannot be found,
  // ERR_MISSING_STYLES is raised.
  optional StyleIdsStack style_references = 1;

  // Content for this ImageElement.
  oneof content {
    // The binding to the BindingValue for an Image. It is an error if the
    // BindingValue doesn't define an Image.
    ImageBindingRef image_binding = 2;

    // The image to be displayed.
    Image image = 3;
  }

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// A SpacerElement represents an empty space. Uses include gaps or dividers
// within a card. Styles can be set on a spacer, e.g. background_color, but
// no bindings are supported since it is always empty.
message SpacerElement {

  // Styles applied to this SpacerElement. If any style_ids cannot be found,
  // ERR_MISSING_STYLES is raised.
  optional StyleIdsStack style_references = 1;

  // Height in DP of this spacer.
  optional int32 height = 2;

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// A GridRow is a grid structure forming a horizontal slice.
message GridRow {

  // Styles applied to this GridRow.
  optional StyleIdsStack style_references = 1;

  // A list of cells defining the content of the grid.
  repeated GridCell cells = 2;

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// The Grid Cell represents the contents within a GridRow.
// In case the ElementList in a GridCell has specified height that is smaller
// than the height of the GridCell, it'll be center aligned vertically.
// Next available ID: 7
message GridCell {

  // The cell content.
  oneof cell_content {
    // Allow a binding of an ElementList.
    ElementListBindingRef element_list_binding = 1 [deprecated = true];

    // Allow binding of an ElementList coming from a template.
    // In case the referenced template has several bindings, a GridCell instance
    // will be created for each one of them. The created GridCells will be
    // added to the GridRow containing this GridCell. The width of the created
    // GridCells is duplicated from this one.
    //
    // For example:
    // In case there's a GridRow with the following GridCells:
    //  +----------+----------------------+----------+
    //  | Template | Template 2 with data | Template |
    //  |     1    |  bindings {a,b,c }   |    3     |
    //  +----------+----------------------+----------+
    //
    // After the bindings are resolved, it will become:
    //  +----------+------------+------------+------------+----------+
    //  | Template | Template 2 | Template 2 | Template 2 | Template |
    //  |     1    | {data "a"} | {data "b"} | {data "c"} |     3    |
    //  +----------+------------+------------+------------+----------+
    //
    // IMPORTANT: This feature is currently not supported in some of the
    //   platforms. Please try to avoid non-slice templates, if possible.
    TemplateBindingRef template_binding = 2 [deprecated = true];

    // Define the cell content as a list of UI elements.
    ElementList element_list = 3 [deprecated = true];

    // The cell content.
    // TODO: remove the oneof and just keep this.
    Element content = 6;
  }

  // The width of this cell, either fixed width or relative width.
  oneof cell_width {
    // Specified inline.
    GridCellWidth width = 4;

    // Width specified in bindings.
    GridCellWidthBindingRef width_binding = 5;
  }

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// A grid cell width can be expressed in either DP or as a weight.
message GridCellWidth {

  // The width specification.
  oneof width_spec {
    // The width of the cell expressed as DP.
    int32 dp = 1;

    // The width of the cell expressed as a weight.
    int32 weight = 2;
  }
}

// A single binding context, such as a whole Frame, or a single row in a grid.
// Binding IDs must be unique; if two or more BindingValues with the same
// `binding_id` are found within the same binding context,
// ERR_DUPLICATE_BINDING_VALUE is raised.
message BindingContext {

  // The set of all bindings for a Template.
  repeated BindingValue binding_values = 1;
}

// A BindingValue is a name/value pair which provides a value to be substituted
// wherever the specified `binding_id` is defined in the Template.
message BindingValue {

  // The name of the binding within the Template where this BindingValue should
  // be substituted. Must be unique within a binding context.
  optional string binding_id = 1;

  // The possible values for the BindingValue.
  oneof values {
    // Data to be displayed in a CustomElement. Clients using Piet should add
    // extensions to this proto to pass their custom data.
    CustomElementData custom_element_data = 2;

    // ParameterizedText to be used in a TextElement.
    ParameterizedText parameterized_text = 3;

    // ChunkedText to be used in a TextElement.
    ChunkedText chunked_text = 4;

    // Image to be used in an ImageElement.
    Image image = 5;

    // Generic ElementList container binding.
    ElementList element_list = 6;

    // A Base64-encoded serialized ClickTrackingCGI proto that identifies the
    // logged Visual Element corresponding to a bound Piet Template.
    string ved = 7;

    // Binding value for a TemplateInvocation.
    TemplateInvocation template_invocation = 8;

    // Width of a cell.
    GridCellWidth cell_width = 9;

    // Actions that may be bound at runtime.
    Actions actions = 10;

    // Style that is bound to an element, and overrides the styles defined by
    // the element. The Style attributes that can be bound are only a subset
    // of all possible Styles.
    BoundStyle bound_style = 11;
  }

  // Controls the visibility of the UI element corresponding to this binding.
  enum Visibility {

    VISIBILITY_UNSPECIFIED = 0;

    // By default, every element is visible. If set to VISIBLE, at least one of
    // the elements in the `values` oneof MUST be present, otherwise an error is
    // raised.
    VISIBLE = 1;

    // The UI element corresponding to this binding is included in
    // layout computation, but its visible UI is hidden.
    INVISIBLE = 2;

    // The UI element corresponding to this binding is completely
    // removed from the view hierarchy. It is not used to compute layout. This
    // is the equivalent of Android’s visibility:GONE.
    GONE = 3;
  }

  // Sets the visibility of the UI element corresponding to this binding.
  optional Visibility visibility = 13 [default = VISIBLE];

  // Data to provide a host in order for host to fulfill a binding for Piet.
  // When Piet binds a value it will first look to see if there is a
  // HostBindingData set. If there is one, then Piet asks the host for a new
  // BindingValue to use. The host will be given this BindingValue from which it
  // can use HostBindingData to determine how to create a new BindingValue. This
  // allows the host to selectively alter the server specified BindingValue. If
  // the BindingValue returned by the host has HostBindingData set it will be
  // ignored. If there is no binding provided in the oneof then an error will be
  // raised.  See [INTERNAL LINK] for a list of possible errors that could be
  // raised.
  //
  // Piet will use the binding reference and ask the host for a specific
  // binding based on that reference type. As an example, Piet will request the
  // host for an Image when ImageBindingRef is specified.
  //
  // An example usage of a host binding would be to check if something has
  // been stored on the device and signaling with icons whether content is
  // there or not.  The server can specify where this element will appear and
  // the host can determine what to show or even if the element should be
  // shown.
  optional HostBindingData host_binding_data = 14;
}

// Data to be displayed in a CustomElement. Clients using Piet should add
// extensions to this proto to pass their custom data to CustomElements.
message CustomElementData {

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}

// Data which is accompanied with BindingValue in order for a host to determine
// the information it needs to provide the correct BindingValue to fulfill a
// binding reference.  Client using Piet should add extensions to this proto to
// pass their host specific data needed to fulfill the binding reference.
message HostBindingData {

  // Please use CL numbers you own for extension numbers.
  extensions 10000 to max;
}
