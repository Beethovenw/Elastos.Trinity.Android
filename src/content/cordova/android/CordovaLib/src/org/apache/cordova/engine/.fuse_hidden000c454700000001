package org.apache.cordova.engine;

package org.apache.cordova.engine;

import android.content.Context;
import android.util.AttributeSet;
import android.view.KeyEvent;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.CordovaWebViewEngine;

import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.ClipDrawable;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.ActionMode;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

import org.chromium.base.annotations.CalledByNative;
import org.chromium.base.annotations.JNINamespace;
import org.chromium.content.browser.ActivityContentVideoViewEmbedder;
import org.chromium.content.browser.ContentVideoViewEmbedder;
import org.chromium.content.browser.ContentView;
import org.chromium.content.browser.ContentViewClient;
import org.chromium.content.browser.ContentViewCore;
import org.chromium.content.browser.ContentViewRenderView;
import org.chromium.content_public.browser.ActionModeCallbackHelper;
import org.chromium.content_public.browser.LoadUrlParams;
import org.chromium.content_public.browser.NavigationController;
import org.chromium.content_public.browser.WebContents;
import org.chromium.ui.base.WindowAndroid;

class ShellWebView extends AbsoluteLayout implements CordovaWebViewEngine.EngineView {

    private ContentViewCore mContentViewCore;
    private WebContents mWebContents;
    private NavigationController mNavigationController;
    private final ContentViewClient mContentViewClient = new ContentViewClient();

    private ContentViewRenderView mContentViewRenderView;
    private WindowAndroid mWindow;
    private ShellViewAndroidDelegate mViewAndroidDelegate;
    private ContentView mContentView;

    public ShellWebView(Context context) {
        this(context, null);
    }

    public View getContainerView(){
        return mContentView;
    }

    public ShellWebView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    @Override
    public CordovaWebView getCordovaWebView() {
        return null;
    }

    public void init() {
        final boolean listenToActivityState = true;
        mWindowAndroid = new ActivityWindowAndroid(this, listenToActivityState);
        mWindowAndroid.restoreInstanceState(savedInstanceState);
        setWindow(mWindowAndroid);
    }


    public void setWindow(WindowAndroid window) {
        mWindow = window;
        mContentViewRenderView = new ContentViewRenderView(getContext());
        mContentViewRenderView.onNativeLibraryLoaded(window);
    }

    public static String sanitizeUrl(String url) {
        if (url == null) return null;
        if (url.startsWith("www.") || url.indexOf(":") == -1) url = "http://" + url;
        return url;
    }

    public void loadUrl(final String url){
        if (url == null) return;
        mNavigationController.loadUrl(new LoadUrlParams(sanitizeUrl(url)));
        mContentViewCore.getContainerView().clearFocus();
        mContentViewCore.getContainerView().requestFocus();
    }

    private ActionMode.Callback defaultActionCallback() {
        final ActionModeCallbackHelper helper =
                mContentViewCore.getActionModeCallbackHelper();

        return new ActionMode.Callback() {
            @Override
            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
                helper.onCreateActionMode(mode, menu);
                return true;
            }

            @Override
            public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
                return helper.onPrepareActionMode(mode, menu);
            }

            @Override
            public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
                return helper.onActionItemClicked(mode, item);
            }

            @Override
            public void onDestroyActionMode(ActionMode mode) {
                helper.onDestroyActionMode();
            }
        };
    }

    private initContentViewCore(WebContents webContents) {
        Context context = getContext();
        mContentViewCore = new ContentViewCore(context, "");
        mContentView = ContentView.createContentView(context, mContentViewCore);
        mViewAndroidDelegate = new ShellViewAndroidDelegate(mContentView);
        mContentViewCore.initialize(mViewAndroidDelegate, mContentView, webContents, mWindow);
        mContentViewCore.setActionModeCallback(defaultActionCallback());
        mContentViewCore.setContentViewClient(mContentViewClient);
        mWebContents = mContentViewCore.getWebContents();
        mNavigationController = mWebContents.getNavigationController();
        if (getParent() != null) mContentViewCore.onShow();
        mContentView.requestFocus();
        mContentViewRenderView.setCurrentContentViewCore(mContentViewCore);
    }

    public String getUrl(){
        if (isDestroyed(WARN)) return null;
        String url =  mWebContents.getUrl();
        if (url == null || url.trim().isEmpty()) return null;
        return url;
    }

    public void stopLoading() {
        if (!isDestroyed(WARN)) mWebContents.stop();
    }

    public void clearCache() {
        if (!isDestroyed(WARN)) nativeClearCache(mNativeAwContents, includeDiskFiles);
    }

    public void clearHistory() {
        if (!isDestroyed(WARN)) mNavigationController.clearHistory();
    }

    public boolean canGoBack() {
        return isDestroyed(WARN) ? false : mNavigationController.canGoBack();
    }

    public boolean goBack() {
        if (!isDestroyed(WARN)) mNavigationController.goBack();
    }

    public void evaluateJavascript(String js, ValueCallback<String> callback){
        mWebContents.evaluateJavaScript(script, jsCallback);
    }


    public ShellViewAndroidDelegate getViewAndroidDelegate() {
        return mViewAndroidDelegate;
    }

    private boolean isDestroyed(int warnIfDestroyed) {
        return false;
    }
}